services:
  web:
    container_name: tv-web
    build:
      context: ./website
      args:
        USER: ${POSTGRES_USER}
        PASSWORD: ${POSTGRES_PASSWORD}
        DATABASE: ${POSTGRES_DB}
        HOST: ${HOST}
        PORT: ${PORT}
        DJANGO_SECURE_KEY: ${DJANGO_SECURE_KEY}
        DJANGO_USER: ${DJANGO_USER}
        DJANGO_PG_SCHEMA: ${DJANGO_PG_SCHEMA}
        # i know it's not DRY but I want to make/migrate on the fly in development
        # could do some work on env management, low priority for now
    environment:
      USER: ${POSTGRES_USER}
      PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE: ${POSTGRES_DB}
      HOST: ${HOST}
      PORT: ${PORT}
      RHOST: ${RHOST}
      RPORT: ${RPORT}
      GMAIL: ${GMAIL}
      GMAILPSWD: ${GMAILPSWD}
    volumes:
      - img-var:/imgVar/
    networks:
      - frontend
      - backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  nginx:
    container_name: tv-proxy
    build:
      context: ./proxy
    volumes:
      - ./proxy/static/:/static
      - img-var:/static/img/imgVar
    ports:
      - "443:443"
    networks:
      - frontend
    depends_on:
      - web

  db:
    container_name: tv-db
    image: postgres:16-alpine3.19
    env_file:
      - .env
    volumes:
      # - pg-data:/var/lib/postgresql/data
      - ./database/init-2.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "6543:${PORT}"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 3s
      timeout: 3s
      retries: 10

  redis:
    container_name: tv-redis
    image: cgr.dev/chainguard/redis:latest
    networks:
      - backend

networks:
  frontend:
  backend:
volumes:
  pg-data:
    driver: local
  img-var:
    external: true
    # i want it to be easy to inspect img-var volume, but not database volume
    # so i'm basically letting docker do name mangling


# docker compose down && docker volume rm 495-website_pg-data && docker volume rm 495-website_redis-data

# Let's stick to this order:
# service_name:
#   build/image:
#     context:
#     args:
#   env/file:
#   volumes:
#   ports:
#   networks:
#   depends_on:
#   healthcheck/anything else:
