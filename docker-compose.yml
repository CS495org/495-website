version: '3.8'

services:
  webapp:
    build:
      context: ./cs495_website
      args:
        USER: ${USER}
        PASSWORD: ${PASSWORD}
        DATABASE: ${DATABASE}
        HOST: ${HOST}
        PORT: ${PORT}
        DJANGO_SECURE_KEY: ${DJANGO_SECURE_KEY}
        DJANGO_USER: ${DJANGO_USER}
    container_name: 495_webapp
    # ports:
      # - "8000:8000" #enable for faster responses thru localhost
    networks:
      - 495_network
    environment:
      USER: ${USER}
      PASSWORD: ${PASSWORD}
      DATABASE: ${DATABASE}
      HOST: ${HOST}
      PORT: ${PORT}
      RHOST: ${RHOST}
      RPORT: ${RPORT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  nginx:
    build:
      context: ./proxy
    container_name: reverse_proxy
    ports:
      - "443:443"
    depends_on:
      - webapp
    networks:
      - 495_network

  db:
    image: postgres:16
    container_name: 495-db
    # ports:
    #   - "4567:${PORT}" #enable for accessing postgres from host machine at port 4567 (see ./database/README for more info)
    networks:
      - 495_network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_DB: ${DATABASE}
      POSTGRES_USER: ${USER}
      POSTGRES_PASSWORD: ${PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 10s
      retries: 10

  redis:
    image: redis:7
    container_name: 495-redis
    # ports: "6379:6379" #again, enable to access redis CLI from host machine
    networks:
      - 495_network
    # volumes:
    #   - redis-data:/data

networks:
  495_network:
volumes:
  postgres-data:
    driver: local
  # redis-data:
  #   driver: local #to make redis persist


# docker compose down && docker volume rm 495-website_postgres-data && docker volume rm 495-website_redis-data